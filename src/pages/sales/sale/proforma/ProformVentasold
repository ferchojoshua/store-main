import React, { useState, useContext, useEffect } from "react";
import { DataContext } from "../../../../context/DataContext";
import { DatePicker } from "@mui/lab";
import { useNavigate } from "react-router-dom";
import { getRuta, toastError, toastSuccess } from "../../../../../src/helpers/Helpers";
import { Container, Paper, Grid,  Stack, TextField, } from "@mui/material";
import {
  deleteToken,
  deleteUserData,
  getToken,
} from "../../../../../src/services/Account";
import { isEmpty } from "lodash";
import SelectClient from "../SelectClient";
import SelectProduct from "../SelectProduct";
import SelectCatalogo from "../proforma/SelectCatalogo";
import SelectTipoVenta from "../SelectTipoVenta";
import ProductDescriptiones from "./ProductDescriptiones";
import SaleDetailProforma from "../proforma/SaleDetailProforma";
import { addSaleAsync } from "../../../../services/SalesApi";
import SmallModal from "../../../../../src/components/modals/SmallModal";
import { BillComponent } from "../printBill/BillComponent";
import ProformaComponent from "../printBill/ProformaComponent";
import PreFacturar from "../PreFacturar";
// import { getActiveUsersAsync} from "../../../services/UsersApi";

const ProformVentas = () => {
  let ruta = getRuta();

  const { setIsLoading, setIsLogged, setIsDefaultPass, reload, setReload, user, } =
    useContext(DataContext);
  let navigate = useNavigate();
  const token = getToken();

  const [typeClient, setTypeClient] = useState(true);
  const [selectedClient, setSelectedClient] = useState("");
  const [selectedVendedor, setselectedVendedor] = useState("");
  const [eventualClient, setEventualClient] = useState("");
  const [selectedStore, setSelectedStore] = useState("");
  const [typeVenta, setTypeVenta] = useState("contado");
  const [selectedProduct, setSelectedProduct] = useState("");
  const [cantidad, setCantidad] = useState("");
  const [descuento, setDescuento] = useState("");
  const [descuentoXPercent, setDescuentoXPercent] = useState("");
  const [descuentoXMonto, setDescuentoXMonto] = useState("");
  const [descuentoCod, setDescuentoCod] = useState("");
  const [descuentoGlobal, setDescuentoGlobal] = useState("");
  const [descuentoGlobalMonto, setDescuentoGlobalMonto] = useState("");
  const [descuentoGlobalPercent, setDescuentoGlobalPercent] = useState("");
  const [isDescPercent, setIsDescPercent] = useState(false);
  const [selectedPrecio, setSelectedPrecio] = useState("PVM");
  const [costoAntesDescuento, setCostoAntesDescuento] = useState("");
  const [costoXProducto, setcostoXProducto] = useState("");
  const [selectedProductList, setSelectedProductList] = useState([]);
  const [montoVenta, setMontoVenta] = useState(0);
  const [barCodeSearch, setBarCodeSearch] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [dataBill, setDataBill] = useState([]);
  const [showProformaModal, setShowProformaModal] = useState(false);
  const [dataProforma, setDataProforma] = useState([]);
  const [showFacturarModal, setShowFacturarModal] = useState(false);
  const [montoVentaDespuesDescuento, setMontoVentaDespuesDescuento] = useState(0);
  const [montoVentaAntesDescuento, setMontoVentaAntesDescuento] = useState(0);
  const [creditoDisponible, setCreditoDisponible] = useState("");
  const [saldoVencido, setSaldoVencido] = useState("");
  const [factVencidas, setFactVencidas] = useState("");
  const [catalogo, setCatalogo] = useState([]);
  const [selectedCatalogo, setSelectedCatalogo] = useState("");
  const [selectedTipopago, setSelectedTipoPago] = useState(1);
  const [reference, setReference] = useState("");
  var date = new Date();
  const [fechaDesde, setDesdeFecha] = useState(new Date(date.getFullYear(), date.getMonth(), date.getDate()));
  const [fechaHassta, setHasstaFecha] = useState(new Date());

  useEffect(() => {
    setTypeClient(true);
    setTypeVenta("contado");
  }, []);

  const onTypeClientChange = (value) => {
    setTypeClient(value);
    if (value) {
      setTypeVenta("contado");
      setSelectedClient("");
    } else {
      setEventualClient("");
    }
  };
  

  const addToProductList = () => {
    const { precioVentaDetalle, precioVentaMayor, producto, almacen } =
      selectedProduct;
    if (descuentoCod !== "VC.2022*" && !isEmpty(descuento)) {
      toastError("Codigo incorrecto");
      return;
    }
    if (!cantidad) {
      toastError("Ingrese cantidad a comprar");
      return;
    }

    const filtered = selectedProductList.filter(
      (item) => item.product.id === producto.id
    );

    if (filtered.length > 0) {
      let cantActual = parseInt(filtered[0].cantidad);
      let cantNueva = parseInt(cantidad);
      if (cantActual + cantNueva > selectedProduct.existencia) {
        toastError("No vender mas de lo que hay en existencia");
        setCantidad("");
        return;
      }
      filtered[0].cantidad = cantActual + cantNueva;
      filtered[0].costoTotal =
        (cantActual + cantNueva) * filtered[0].costoUnitario;

      let montoSumar = cantNueva * filtered[0].costoUnitario;

      setMontoVentaAntesDescuento(
        parseFloat(montoSumar) + parseFloat(montoVentaAntesDescuento)
      );
      setMontoVentaDespuesDescuento(
        parseFloat(montoSumar) + parseFloat(montoVentaAntesDescuento)
      );
      setSelectedProduct("");
      setCantidad("");
      setDescuento("");
      setcostoXProducto("");
      return;
    }

    const data = {
      product: producto,
      cantidad: parseInt(cantidad),
      descuento: descuentoXMonto === "" ? 0 : parseFloat(descuentoXMonto),
      costoUnitario: costoAntesDescuento / cantidad,
      PVM: precioVentaMayor,
      PVD: precioVentaDetalle,
      costoTotalAntesDescuento: costoAntesDescuento / cantidad,
      costoTotalDespuesDescuento:
        descuentoXMonto === "" ? costoAntesDescuento / cantidad
          : costoAntesDescuento / cantidad - parseFloat(descuentoXMonto),
      costoTotal: parseFloat(costoXProducto),
      store: almacen,
      isDescuento: descuento ? true : false,
      descuentoXPercent: descuentoXPercent,
      codigoDescuento: descuentoCod,
      costoCompra: selectedProduct.precioCompra * cantidad,
    };

    setMontoVentaAntesDescuento(
      parseFloat(montoVentaAntesDescuento) + parseFloat(costoXProducto)
    );
    setMontoVentaDespuesDescuento(
      parseFloat(montoVentaAntesDescuento) + parseFloat(costoXProducto)
    );

    setSelectedProduct("");
    setCantidad("");
    setDescuento("");
    setcostoXProducto("");
    setDescuentoCod("");
    setSelectedProductList([...selectedProductList, data]);
  };

  const addNewVenta = async () => {
    if (isEmpty(selectedProductList) || montoVentaDespuesDescuento === 0) {
      toastError("Seleccione al menos un producto");
      return;
    }

    if (descuentoCod !== "VC.2022*" && !isEmpty(descuentoGlobal)) {
      toastError("Codigo incorrecto");
      return;
    }

    if (!typeClient && isEmpty(selectedClient)) {
      toastError("Seleccione un cliente");
      return;
    }

    if (!typeClient && selectedClient.facturasVencidas > 0) {
      toastError("El cliente tiene saldo vencido");
      return;
    }

    const data = {
      isEventual: typeClient,
      nombreCliente: eventualClient,
      idClient: selectedClient.id,
      montoVenta: montoVentaDespuesDescuento,
      saleDetails: selectedProductList,
      isContado: typeVenta === "contado" ? true : false,
      storeid: selectedStore,
      isDescuento: descuentoGlobal ? true : false,
      descuentoXPercent: descuentoGlobalPercent ? descuentoGlobalPercent : 0,
      descuentoXMonto: descuentoGlobalMonto ? descuentoGlobalMonto : 0,
      codigoDescuento: descuentoCod,
      montoVentaAntesDescuento,
      tipoPagoId: selectedTipopago,
      reference,
    };

    setIsLoading(true);
    const result = await addSaleAsync(token, data);
    if (!result.statusResponse) {
      setIsLoading(false);
      if (result.error.request.status === 401) {
        navigate(`${ruta}/unauthorized`);
        return;
      }
      toastError(result.error.message);
      return;
    }
    if (result.data === "eX01") {
      setIsLoading(false);
      deleteUserData();
      deleteToken();
      setIsLogged(false);
      return;
    }
    if (result.data.isDefaultPass) {
      setIsLoading(false);
      setIsDefaultPass(true);
      return;
    }
    setTypeClient(true);
    setSelectedClient("");
    setEventualClient("");
    setMontoVenta(0);
    setDescuento("");
    setDescuentoCod("");
    setDescuentoGlobal("");
    setDescuentoGlobalMonto("");
    setDescuentoGlobalPercent("");
    setMontoVentaAntesDescuento(0);
    setMontoVentaDespuesDescuento(0);
    setSelectedTipoPago(1);
    setReference("");
    setSelectedStore("");
    setSelectedProductList([]);
    setIsLoading(false);
    toastSuccess("Venta Realizada");
    setReload(!reload);
    setDataBill(result.data);
    setShowFacturarModal(false);
    printBill();
  };

  const addProformma = async () => {
    if (isEmpty(selectedProductList) || montoVentaDespuesDescuento === 0) {
      toastError("Seleccione al menos un producto");
      return;
    }

    if (!typeClient && isEmpty(selectedClient)) {
      toastError("Seleccione un cliente");
      return;
    }

    const data = {
      nombreCliente: eventualClient,
      idClient: selectedClient.id,
      montoVenta: montoVentaAntesDescuento,
      saleDetails: selectedProductList,
      storeid: selectedStore,
    };

    setDataProforma(data);
    setShowProformaModal(true);
  };

  const printBill = () => {
    setShowModal(true);
  };

  return (
    <div>
      <Container maxWidth="xl">
        <div
          style={{
            display: "flex",
            flexDirection: "row",
            alignContent: "center",
          }}
        >
          <h1>AÃ±adir Cotizacion</h1>
        </div>

        <hr />

        <Paper
  elevation={10}
  sx={{
    borderRadius: 20,
    padding: 6,
  }}
>
  <Grid container spacing={2}>
    {/* Primera fila: Fecha */}
    <Grid item xs={12} md={12}>
      <Stack spacing={8} direction="row">
        <DatePicker
          label="Fecha"
          value={fechaDesde}
          onChange={(newValue) => {
            setDesdeFecha(newValue);
          }}
          renderInput={(params) => (
            <TextField
              required
              fullWidth
              variant="standard"
              {...params}
              size="small" // TamaÃ±o pequeÃ±o
            />
          )}
        />
      </Stack>
    </Grid>

    {/* Segunda fila: SelectClient */}
    <Grid item xs={12}>
      <SelectClient
        selectedVendedor={user}
        selectedClient={selectedClient}
        setSelectedClient={setSelectedClient}
        eventualClient={eventualClient}
        setEventualClient={setEventualClient}
        typeClient={typeClient}
        onTypeClientChange={onTypeClientChange}
        creditoDisponible={creditoDisponible}
        setCreditoDisponible={setCreditoDisponible}
        saldoVencido={saldoVencido}
        setSaldoVencido={setSaldoVencido}
        setFactVencidas={setFactVencidas}
        typeVenta={typeVenta}
      />
    </Grid>

       {/* Tercera fila: SelectCatalogo */}
       <Grid item xs={12}>
      <SelectCatalogo
       selectedVendedor={user}
       selectedCatalogo={selectedCatalogo}
        setSelectedCatalogo={ setSelectedCatalogo}
       />
    </Grid>

    {/* Cuarta fila: SelectProduct */}
    <Grid item xs={12}>
      <SelectProduct
        selectedProductList={selectedProductList}
        selectedStore={selectedStore}
        setSelectedStore={setSelectedStore}
        selectedProduct={selectedProduct}
        setSelectedProduct={setSelectedProduct}
        barCodeSearch={barCodeSearch}
        setBarCodeSearch={setBarCodeSearch}
      />
    </Grid> 

    {/* Quinta fila: ProductDescription (solo si hay producto seleccionado) */}
    {selectedProduct && (
      <Grid item xs={12}>
        <ProductDescriptiones
          selectedProduct={selectedProduct}
          cantidad={cantidad}
          setCantidad={setCantidad}
          descuento={descuento}
          setDescuento={setDescuento}
          selectedPrecio={selectedPrecio}
          setSelectedPrecio={setSelectedPrecio}
          costoXProducto={costoXProducto}
          setcostoXProducto={setcostoXProducto}
          addToProductList={addToProductList}
          barCodeSearch={barCodeSearch}
          isDescPercent={isDescPercent}
          setIsDescPercent={setIsDescPercent}
          descuentoXPercent={descuentoXPercent}
          setDescuentoXPercent={setDescuentoXPercent}
          costoAntesDescuento={costoAntesDescuento}
          setCostoAntesDescuento={setCostoAntesDescuento}
          setDescuentoXMonto={setDescuentoXMonto}
          descuentoCod={descuentoCod}
          setDescuentoCod={setDescuentoCod}
        />
      </Grid>
    )}  
  </Grid>
</Paper>

        <SaleDetailProforma
          selectedProductList={selectedProductList}
          setSelectedProductList={setSelectedProductList}
          addNewVenta={addNewVenta}
          addProformma={addProformma}
          showFacturarModal={showFacturarModal}
          setShowFacturarModal={setShowFacturarModal}
          montoVentaAntesDescuento={montoVentaAntesDescuento}
          setMontoVentaAntesDescuento={setMontoVentaAntesDescuento}
          montoVentaDespuesDescuento={montoVentaDespuesDescuento}
          setMontoVentaDespuesDescuento={setMontoVentaDespuesDescuento}
          descuentoGlobal={descuentoGlobal}
          isFacturar={false}
        />
      </Container>

      <SmallModal
        titulo={"Imprimir Recibo"}
        isVisible={showModal}
        setVisible={setShowModal}
      >
        <BillComponent data={dataBill} setShowModal={setShowModal} />
      </SmallModal>

      <SmallModal
        titulo={"Imprimir Proforma"}
        isVisible={showProformaModal}
        setVisible={setShowProformaModal}
      >
        <ProformaComponent
          data={dataProforma}   setShowModal={setShowProformaModal}
        />
      </SmallModal>

       <SmallModal
        titulo={"Facturar"}
        isVisible={showFacturarModal}
        setVisible={setShowFacturarModal}
      > 
        <PreFacturar
          isDescPercent={isDescPercent}
          setIsDescPercent={setIsDescPercent}
          descuentoCod={descuentoCod}
          setDescuentoCod={setDescuentoCod}
          descuentoGlobalMonto={descuentoGlobalMonto}
          setDescuentoGlobalMonto={setDescuentoGlobalMonto}
          descuentoGlobalPercent={descuentoGlobalPercent}
          setDescuentoGlobalPercent={setDescuentoGlobalPercent}
          descuentoGlobal={descuentoGlobal}
          setDescuentoGlobal={setDescuentoGlobal}
          montoVentaDespuesDescuento={montoVentaDespuesDescuento}
          setMontoVentaDespuesDescuento={setMontoVentaDespuesDescuento}
          addNewVenta={addNewVenta}
          montoVentaAntesDescuento={montoVentaAntesDescuento}
          setMontoVentaAntesDescuento={setMontoVentaAntesDescuento}
          selectedProductList={selectedProductList}
          typeVenta={typeVenta}
          setSelectedTipoPago={setSelectedTipoPago}
          selectedTipopago={selectedTipopago}
          reference={reference}
          setReference={setReference}
        />
      </SmallModal>
    </div>
  );
};

export default ProformVentas;
